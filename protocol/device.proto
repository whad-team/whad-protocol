/*
 * Device Information messages.
 */

syntax = "proto3";

package discovery;

/* Domains definition. */
enum Domain {
    _DomainNone         = 0x00000000;
    Generic             = 0x01000000;
    BtClassic           = 0x02000000;
    BtLE                = 0x03000000;
    Zigbee              = 0x04000000;
    SixLowPan           = 0x05000000;
    Esb                 = 0x06000000;
    LogitechUnifying    = 0x07000000;
    Mosart              = 0x08000000;
    ANT                 = 0x09000000;
    ANT_Plus            = 0x0A000000;
    ANT_FS              = 0x0B000000;
}


/**
* DeviceType specifies the supported devices.
**/
enum DeviceType {
    Esp32BleFuzzer = 0;
    Butterfly = 1;
    BtleJack = 2;
    VirtualDevice = 4;
}


/**
 * Capability specifies a device capability.
 **/

enum Capability {
    _CapNone        = 0x00;
    Scan            = 0x01;
    Sniff           = 0x02;
    Inject          = 0x04;
    Jam             = 0x08;
    Hijack          = 0x10;
    Hook            = 0x20;
    MasterRole      = 0x40;
    SlaveRole       = 0x80;
    NoRawData       = 0x100;
    EndDeviceRole   = 0x101;
    CoordinatorRole = 0x102;
    RouterRole      = 0x104;
}

message DeviceResetQuery {
}

message DeviceReadyResp {
}

message SetTransportSpeed {
    uint32 speed = 1;
}

/**
    * DeviceInfoResp message contains information about the device, its firmware,
    * its supported domains and associated capabilities.
    **/

message DeviceInfoResp {

    /* Device type. */
    uint32 type = 1;

    /* Device ID */
    bytes devid = 2;

    /* Supported minimal protocol version. */
    uint32 proto_min_ver = 3;

    /* Maximum supported speed (if useful). */
    uint32 max_speed = 4;

    /* Device firmware info. */
    bytes fw_author = 5;
    bytes fw_url = 6;
    uint32 fw_version_major = 7;
    uint32 fw_version_minor = 8;
    uint32 fw_version_rev = 9;

    /**
        * Information about capabilities for each supported domain.
        *
        * Each uint32 contains a domain and the associated capabilities:
        * capability = (domain << 24) | (capabilities & 0xFFFFFF)
        **/

    repeated uint32 capabilities = 10 [packed = true];
}


/**
    * DeviceDomainInfo message contains information about the commands
    * supported by a specific domain.
    *
    * `domain` specifies the requested domain
    * `supported_commands` is a variable-size bitfield used to specify the
    * supported commands. Each bit is associated to a command and set to
    * 1 if command is supported, 0 otherwise.
    *
    * Available commands per domain are defined in the corresponding
    * protocol definition file.
    */

message DeviceDomainInfoResp {
    uint32 domain = 1;
    uint64 supported_commands = 2;
}


/**
* Query remote device, expecting a DeviceInfo message in return.
*
* `proto_ver` specifies the actual version of the protocol supported
* by the sender.
**/

message DeviceInfoQuery {
    uint32 proto_ver = 1;
}


/**
    * Query remote device domain information.
    *
    * `domain` specifies the target domain.
    */

message DeviceDomainInfoQuery {
    uint32 domain = 1;
}


message Message {
    oneof msg {
        DeviceResetQuery reset_query = 1;
        DeviceReadyResp ready_resp = 2;
        DeviceInfoQuery info_query = 3;
        DeviceInfoResp info_resp = 4;
        DeviceDomainInfoQuery domain_query = 5;
        DeviceDomainInfoResp domain_resp = 6;
        SetTransportSpeed set_speed = 7;
    }
}
