/******************************************************
 * ANT messages and notifications
 *
 * This file defines a set of messages used to communicate
 * with an ANT hacking device in order to:
 *
 * - packet sniffing
 * - packet jamming
 * - raw packet injection
 * - act as a Master
 * - act as a Slave
 **/


syntax = "proto3";

package ant;

/**
 * Supported commands for ANT domain.
 *
 * This enumeration specifies the commands a device may
 * support, allowing a host computer to determine what
 * features a device provides and the supported commands.
 *
 * These constants SHALL be used to generate the commands
 * bitmap for ANT domain in DeviceDomainInfoResp message.
 *
 **/

enum ANTCommand {
    /**
     * Low-level commands
     **/

    /* Set Device number. */
    SetDeviceNumber           = 0x00;

    /* Set Device Type. */
    SetDeviceType             = 0x01;

    /* Set Transmission Type. */
    SetTransmissionType       = 0x02;

    /* Set Channel Period. */
    SetChannelPeriod          = 0x03;

    /* Set Network Key */
    SetNetworkKey             = 0x04;

    /* Assign Channel */
    AssignChannel             = 0x05;

    /* Unassign Channel */
    UnassignChannel           = 0x06;

    /* Open Channel */
    OpenChannel               = 0x07;

    /* Close Channel */
    CloseChannel              = 0x08;

    /* Set Frequency */
    SetFrequency              = 0x09;

    /* Sniff packets. */
    Sniff                     = 0x0a;

    /* Jam packets. */
    Jam                       = 0x0b;

    /* Send packets. */
    Send                      = 0x0c;

    SendRaw                   = 0x0d;

    /**
     * High-level commands.
     **/

    /* Master mode. */
    MasterMode                = 0x0e;

    /* Slave mode. */
    SlaveMode                 = 0x0f;


    /* Start and Stop commands shared with node-related mode. */
    Start                     = 0x10;
    Stop                      = 0x11;
}

/**************************************************
 **************************************************
 *             ANT command messages
 **************************************************
 *************************************************/

/**
 * AntChannelType
 *
 * enum listing the different mode that can be used to
 * configure an ANT packet.
  **/
enum AntChannelType {
    BIDIRECTIONAL_RECEIVE_CHANNEL = 0;
    BIDIRECTIONAL_TRANSMIT_CHANNEL = 1;
    SHARED_BIDIRECTIONAL_RECEIVE_CHANNEL = 2;
    SHARED_BIDIRECTIONAL_TRANSMIT_CHANNEL = 3;
    RECEIVE_ONLY_CHANNEL = 4;
    TRANSMIT_ONLY_CHANNEL = 5;
}

/**
 * SetDeviceNumberCmd
 *
 * Configure the ANT device number for a given channel
 *
 **/
message SetDeviceNumberCmd {
    uint32 channel_number = 1;
    uint32 device_number = 2;
}
/**
 * SetDeviceTypeCmd
 *
 * Configure the  ANT device type, for a given frequency
 *
 **/
message SetDeviceTypeCmd {
    uint32 channel_number = 1;
    uint32 device_type = 2;
}
/**
 * SetTransmissionTypeCmd
 *
 * Configure the  ANT transmission_type, for a given frequency
 *
 **/
message SetTransmissionTypeCmd {
    uint32 channel_number = 1;
    uint32 transmission_type = 2;
}
/**
 * SetChannelPeriodCmd
 *
 * Configure the  ANT channel_period to use for the channel period
 *
 **/
message SetChannelPeriodCmd {
    uint32 channel_number = 1;
    uint32 channel_period = 2;
}
/**
 * SetNetworkKeyCmd
 *
 * Provision of a network key associated with the related network number
 *
 **/

message SetNetworkKeyCmd {
    uint32 network_number = 1;
    bytes network_key = 2;
}
/**
 * AssignChannelCmd
 *
 * Links channel number to network_number
 * In extented mode, it is possible to provide optional parameters if dongle allows
 *
 **/

message AssignChannelCmd {
    uint32 channel_number = 1;
    uint32 network_number = 2;
    AntChannelType channel_type = 3;
    optional bool background_scanning = 4;
    optional bool frequency_agility = 5;
    optional bool fast_channel_initiation = 6;
    optional bool asynchronous_transmission = 7;
}

/**
 * UnassignChannelCmd
 *
 * Breaks the link channel number to network_number
 *
 **/
message UnassignChannelCmd {
    uint32 channel_number = 1;
}

/**
 * OpenChannelCmd
 *
 * Open a new channel with channel_number
 *
 **/

message OpenChannelCmd {
    uint32 channel_number = 1;
}

message CloseChannelCmd {
    uint32 channel_number = 1;
}

message SetFrequencyCmd {
    uint32 channel_number = 1;
    uint32 frequency = 2;
}

message SniffCmd {
    uint32 frequency = 1;
    bytes network_key = 2;
    optional uint32 device_number = 3;
    optional uint32 device_type = 4;
    optional uint32 transmission_type = 5;
}

message JamCmd {
    uint32 frequency = 1;
}


/**
 * SendCmd
 *
 * Transmit ANT packets on a single channel.
 *
 **/
message SendCmd {
    uint32 frequency = 1;
    bytes pdu = 2;
}

message SendRawCmd {
     uint32 frequency = 1;
     bytes pdu = 2;
}

/**
 * MasterMode
 *
 * Enable Master mode. (maybe redundant with Assign Channel ?)
 *
 **/
message MasterModeCmd {
  uint32 channel_number = 1;
}

/**
 * SlaveMode
 *
 * Enable Slave mode. (maybe redundant with Assign Channel ?)
 *
 **/
message SlaveModeCmd {
  uint32 channel_number = 1;
}

/**
 * StartCmd
 *
 * Enable node-related modes.
 **/
message StartCmd {
}

/**
 * StopCmd
 *
 * Disable node-related modes.
 **/
message StopCmd {
}
