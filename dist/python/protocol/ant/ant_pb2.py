# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protocol/ant/ant.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x16protocol/ant/ant.proto\x12\x03\x61nt\"C\n\x12SetDeviceNumberCmd\x12\x16\n\x0e\x63hannel_number\x18\x01 \x01(\r\x12\x15\n\rdevice_number\x18\x02 \x01(\r\"?\n\x10SetDeviceTypeCmd\x12\x16\n\x0e\x63hannel_number\x18\x01 \x01(\r\x12\x13\n\x0b\x64\x65vice_type\x18\x02 \x01(\r\"K\n\x16SetTransmissionTypeCmd\x12\x16\n\x0e\x63hannel_number\x18\x01 \x01(\r\x12\x19\n\x11transmission_type\x18\x02 \x01(\r\"E\n\x13SetChannelPeriodCmd\x12\x16\n\x0e\x63hannel_number\x18\x01 \x01(\r\x12\x16\n\x0e\x63hannel_period\x18\x02 \x01(\r\"?\n\x10SetNetworkKeyCmd\x12\x16\n\x0enetwork_number\x18\x01 \x01(\r\x12\x13\n\x0bnetwork_key\x18\x02 \x01(\x0c\"\xe5\x02\n\x10\x41ssignChannelCmd\x12\x16\n\x0e\x63hannel_number\x18\x01 \x01(\r\x12\x16\n\x0enetwork_number\x18\x02 \x01(\r\x12)\n\x0c\x63hannel_type\x18\x03 \x01(\x0e\x32\x13.ant.AntChannelType\x12 \n\x13\x62\x61\x63kground_scanning\x18\x04 \x01(\x08H\x00\x88\x01\x01\x12\x1e\n\x11\x66requency_agility\x18\x05 \x01(\x08H\x01\x88\x01\x01\x12$\n\x17\x66\x61st_channel_initiation\x18\x06 \x01(\x08H\x02\x88\x01\x01\x12&\n\x19\x61synchronous_transmission\x18\x07 \x01(\x08H\x03\x88\x01\x01\x42\x16\n\x14_background_scanningB\x14\n\x12_frequency_agilityB\x1a\n\x18_fast_channel_initiationB\x1c\n\x1a_asynchronous_transmission\",\n\x12UnassignChannelCmd\x12\x16\n\x0e\x63hannel_number\x18\x01 \x01(\r\"(\n\x0eOpenChannelCmd\x12\x16\n\x0e\x63hannel_number\x18\x01 \x01(\r\")\n\x0f\x43loseChannelCmd\x12\x16\n\x0e\x63hannel_number\x18\x01 \x01(\r\"<\n\x0fSetFrequencyCmd\x12\x16\n\x0e\x63hannel_number\x18\x01 \x01(\r\x12\x11\n\tfrequency\x18\x02 \x01(\r\"\xc0\x01\n\x08SniffCmd\x12\x11\n\tfrequency\x18\x01 \x01(\r\x12\x13\n\x0bnetwork_key\x18\x02 \x01(\x0c\x12\x1a\n\rdevice_number\x18\x03 \x01(\rH\x00\x88\x01\x01\x12\x18\n\x0b\x64\x65vice_type\x18\x04 \x01(\rH\x01\x88\x01\x01\x12\x1e\n\x11transmission_type\x18\x05 \x01(\rH\x02\x88\x01\x01\x42\x10\n\x0e_device_numberB\x0e\n\x0c_device_typeB\x14\n\x12_transmission_type\"\x1b\n\x06JamCmd\x12\x11\n\tfrequency\x18\x01 \x01(\r\")\n\x07SendCmd\x12\x11\n\tfrequency\x18\x01 \x01(\r\x12\x0b\n\x03pdu\x18\x02 \x01(\x0c\",\n\nSendRawCmd\x12\x11\n\tfrequency\x18\x01 \x01(\r\x12\x0b\n\x03pdu\x18\x02 \x01(\x0c\"\'\n\rMasterModeCmd\x12\x16\n\x0e\x63hannel_number\x18\x01 \x01(\r\"&\n\x0cSlaveModeCmd\x12\x16\n\x0e\x63hannel_number\x18\x01 \x01(\r\"\n\n\x08StartCmd\"\t\n\x07StopCmd\"\x1b\n\x06Jammed\x12\x11\n\ttimestamp\x18\x01 \x01(\r\"\xb0\x01\n\x0eRawPduReceived\x12\x16\n\x0e\x63hannel_number\x18\x01 \x01(\r\x12\x11\n\x04rssi\x18\x02 \x01(\x05H\x00\x88\x01\x01\x12\x16\n\ttimestamp\x18\x03 \x01(\rH\x01\x88\x01\x01\x12\x19\n\x0c\x63rc_validity\x18\x04 \x01(\x08H\x02\x88\x01\x01\x12\x0b\n\x03pdu\x18\x05 \x01(\x0c\x12\x0b\n\x03\x63rc\x18\x06 \x01(\rB\x07\n\x05_rssiB\x0c\n\n_timestampB\x0f\n\r_crc_validity\"\xa0\x01\n\x0bPduReceived\x12\x16\n\x0e\x63hannel_number\x18\x01 \x01(\r\x12\x11\n\x04rssi\x18\x02 \x01(\x05H\x00\x88\x01\x01\x12\x16\n\ttimestamp\x18\x03 \x01(\rH\x01\x88\x01\x01\x12\x19\n\x0c\x63rc_validity\x18\x04 \x01(\x08H\x02\x88\x01\x01\x12\x0b\n\x03pdu\x18\x05 \x01(\x0c\x42\x07\n\x05_rssiB\x0c\n\n_timestampB\x0f\n\r_crc_validity\"\x8a\x07\n\x07Message\x12\x34\n\x11set_device_number\x18\x01 \x01(\x0b\x32\x17.ant.SetDeviceNumberCmdH\x00\x12\x30\n\x0fset_device_type\x18\x02 \x01(\x0b\x32\x15.ant.SetDeviceTypeCmdH\x00\x12<\n\x15set_transmission_type\x18\x03 \x01(\x0b\x32\x1b.ant.SetTransmissionTypeCmdH\x00\x12\x36\n\x12set_channel_period\x18\x04 \x01(\x0b\x32\x18.ant.SetChannelPeriodCmdH\x00\x12\x30\n\x0fset_network_key\x18\x05 \x01(\x0b\x32\x15.ant.SetNetworkKeyCmdH\x00\x12/\n\x0e\x61ssign_channel\x18\x06 \x01(\x0b\x32\x15.ant.AssignChannelCmdH\x00\x12\x33\n\x10unassign_channel\x18\x07 \x01(\x0b\x32\x17.ant.UnassignChannelCmdH\x00\x12+\n\x0copen_channel\x18\x08 \x01(\x0b\x32\x13.ant.OpenChannelCmdH\x00\x12-\n\rclose_channel\x18\t \x01(\x0b\x32\x14.ant.CloseChannelCmdH\x00\x12-\n\rset_frequency\x18\n \x01(\x0b\x32\x14.ant.SetFrequencyCmdH\x00\x12\x1e\n\x05sniff\x18\x0b \x01(\x0b\x32\r.ant.SniffCmdH\x00\x12\x1a\n\x03jam\x18\x0c \x01(\x0b\x32\x0b.ant.JamCmdH\x00\x12\x1c\n\x04send\x18\r \x01(\x0b\x32\x0c.ant.SendCmdH\x00\x12#\n\x08send_raw\x18\x0e \x01(\x0b\x32\x0f.ant.SendRawCmdH\x00\x12)\n\x0bmaster_mode\x18\x0f \x01(\x0b\x32\x12.ant.MasterModeCmdH\x00\x12\'\n\nslave_mode\x18\x10 \x01(\x0b\x32\x11.ant.SlaveModeCmdH\x00\x12\x1e\n\x05start\x18\x11 \x01(\x0b\x32\r.ant.StartCmdH\x00\x12\x1c\n\x04stop\x18\x12 \x01(\x0b\x32\x0c.ant.StopCmdH\x00\x12\x1d\n\x06jammed\x18\x13 \x01(\x0b\x32\x0b.ant.JammedH\x00\x12&\n\x07raw_pdu\x18\x14 \x01(\x0b\x32\x13.ant.RawPduReceivedH\x00\x12\x1f\n\x03pdu\x18\x15 \x01(\x0b\x32\x10.ant.PduReceivedH\x00\x42\x05\n\x03msg*\xb2\x02\n\nANTCommand\x12\x13\n\x0fSetDeviceNumber\x10\x00\x12\x11\n\rSetDeviceType\x10\x01\x12\x17\n\x13SetTransmissionType\x10\x02\x12\x14\n\x10SetChannelPeriod\x10\x03\x12\x11\n\rSetNetworkKey\x10\x04\x12\x11\n\rAssignChannel\x10\x05\x12\x13\n\x0fUnassignChannel\x10\x06\x12\x0f\n\x0bOpenChannel\x10\x07\x12\x10\n\x0c\x43loseChannel\x10\x08\x12\x10\n\x0cSetFrequency\x10\t\x12\t\n\x05Sniff\x10\n\x12\x07\n\x03Jam\x10\x0b\x12\x08\n\x04Send\x10\x0c\x12\x0b\n\x07SendRaw\x10\r\x12\x0e\n\nMasterMode\x10\x0e\x12\r\n\tSlaveMode\x10\x0f\x12\t\n\x05Start\x10\x10\x12\x08\n\x04Stop\x10\x11*\xe1\x01\n\x0e\x41ntChannelType\x12!\n\x1d\x42IDIRECTIONAL_RECEIVE_CHANNEL\x10\x00\x12\"\n\x1e\x42IDIRECTIONAL_TRANSMIT_CHANNEL\x10\x01\x12(\n$SHARED_BIDIRECTIONAL_RECEIVE_CHANNEL\x10\x02\x12)\n%SHARED_BIDIRECTIONAL_TRANSMIT_CHANNEL\x10\x03\x12\x18\n\x14RECEIVE_ONLY_CHANNEL\x10\x04\x12\x19\n\x15TRANSMIT_ONLY_CHANNEL\x10\x05\x62\x06proto3')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'protocol.ant.ant_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _ANTCOMMAND._serialized_start=2629
  _ANTCOMMAND._serialized_end=2935
  _ANTCHANNELTYPE._serialized_start=2938
  _ANTCHANNELTYPE._serialized_end=3163
  _SETDEVICENUMBERCMD._serialized_start=31
  _SETDEVICENUMBERCMD._serialized_end=98
  _SETDEVICETYPECMD._serialized_start=100
  _SETDEVICETYPECMD._serialized_end=163
  _SETTRANSMISSIONTYPECMD._serialized_start=165
  _SETTRANSMISSIONTYPECMD._serialized_end=240
  _SETCHANNELPERIODCMD._serialized_start=242
  _SETCHANNELPERIODCMD._serialized_end=311
  _SETNETWORKKEYCMD._serialized_start=313
  _SETNETWORKKEYCMD._serialized_end=376
  _ASSIGNCHANNELCMD._serialized_start=379
  _ASSIGNCHANNELCMD._serialized_end=736
  _UNASSIGNCHANNELCMD._serialized_start=738
  _UNASSIGNCHANNELCMD._serialized_end=782
  _OPENCHANNELCMD._serialized_start=784
  _OPENCHANNELCMD._serialized_end=824
  _CLOSECHANNELCMD._serialized_start=826
  _CLOSECHANNELCMD._serialized_end=867
  _SETFREQUENCYCMD._serialized_start=869
  _SETFREQUENCYCMD._serialized_end=929
  _SNIFFCMD._serialized_start=932
  _SNIFFCMD._serialized_end=1124
  _JAMCMD._serialized_start=1126
  _JAMCMD._serialized_end=1153
  _SENDCMD._serialized_start=1155
  _SENDCMD._serialized_end=1196
  _SENDRAWCMD._serialized_start=1198
  _SENDRAWCMD._serialized_end=1242
  _MASTERMODECMD._serialized_start=1244
  _MASTERMODECMD._serialized_end=1283
  _SLAVEMODECMD._serialized_start=1285
  _SLAVEMODECMD._serialized_end=1323
  _STARTCMD._serialized_start=1325
  _STARTCMD._serialized_end=1335
  _STOPCMD._serialized_start=1337
  _STOPCMD._serialized_end=1346
  _JAMMED._serialized_start=1348
  _JAMMED._serialized_end=1375
  _RAWPDURECEIVED._serialized_start=1378
  _RAWPDURECEIVED._serialized_end=1554
  _PDURECEIVED._serialized_start=1557
  _PDURECEIVED._serialized_end=1717
  _MESSAGE._serialized_start=1720
  _MESSAGE._serialized_end=2626
# @@protoc_insertion_point(module_scope)
