/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7-dev */

#ifndef PB_ANT_PROTOCOL_ANT_ANT_PB_H_INCLUDED
#define PB_ANT_PROTOCOL_ANT_ANT_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _ant_ANTCommand { /* *
 Low-level commands */
    /* Set Device number. */
    ant_ANTCommand_SetDeviceNumber = 0, 
    /* Set Device Type. */
    ant_ANTCommand_SetDeviceType = 1, 
    /* Set Transmission Type. */
    ant_ANTCommand_SetTransmissionType = 2, 
    /* Set Channel Period. */
    ant_ANTCommand_SetChannelPeriod = 3, 
    /* Set Network Key */
    ant_ANTCommand_SetNetworkKey = 4, 
    /* Assign Channel */
    ant_ANTCommand_AssignChannel = 5, 
    /* Unassign Channel */
    ant_ANTCommand_UnassignChannel = 6, 
    /* Open Channel */
    ant_ANTCommand_OpenChannel = 7, 
    /* Close Channel */
    ant_ANTCommand_CloseChannel = 8, 
    /* Set Frequency */
    ant_ANTCommand_SetFrequency = 9, 
    /* Sniff packets. */
    ant_ANTCommand_Sniff = 10, 
    /* Jam packets. */
    ant_ANTCommand_Jam = 11, 
    /* Send packets. */
    ant_ANTCommand_Send = 12, 
    ant_ANTCommand_SendRaw = 13, 
    /* Master mode. */
    ant_ANTCommand_MasterMode = 14, 
    /* Slave mode. */
    ant_ANTCommand_SlaveMode = 15, 
    /* Start and Stop commands shared with node-related mode. */
    ant_ANTCommand_Start = 16, 
    ant_ANTCommand_Stop = 17 
} ant_ANTCommand;

/* *
 AntChannelType

 enum listing the different mode that can be used to
 configure an ANT packet. */
typedef enum _ant_AntChannelType { 
    ant_AntChannelType_BIDIRECTIONAL_RECEIVE_CHANNEL = 0, 
    ant_AntChannelType_BIDIRECTIONAL_TRANSMIT_CHANNEL = 1, 
    ant_AntChannelType_SHARED_BIDIRECTIONAL_RECEIVE_CHANNEL = 2, 
    ant_AntChannelType_SHARED_BIDIRECTIONAL_TRANSMIT_CHANNEL = 3, 
    ant_AntChannelType_RECEIVE_ONLY_CHANNEL = 4, 
    ant_AntChannelType_TRANSMIT_ONLY_CHANNEL = 5 
} ant_AntChannelType;

/* Struct definitions */
/* *
 StartCmd

 Enable node-related modes. */
typedef struct _ant_StartCmd { 
    char dummy_field;
} ant_StartCmd;

/* *
 StopCmd

 Disable node-related modes. */
typedef struct _ant_StopCmd { 
    char dummy_field;
} ant_StopCmd;

typedef struct _ant_AssignChannelCmd { 
    uint32_t channel_number;
    uint32_t network_number;
    ant_AntChannelType channel_type;
    bool has_background_scanning;
    bool background_scanning;
    bool has_frequency_agility;
    bool frequency_agility;
    bool has_fast_channel_initiation;
    bool fast_channel_initiation;
    bool has_asynchronous_transmission;
    bool asynchronous_transmission;
} ant_AssignChannelCmd;

/* *
 CloseChannelCmd

 Close an opened channel with channel_number. */
typedef struct _ant_CloseChannelCmd { 
    uint32_t channel_number;
} ant_CloseChannelCmd;

typedef struct _ant_JamCmd { 
    uint32_t frequency;
} ant_JamCmd;

typedef struct _ant_Jammed { 
    uint32_t timestamp;
} ant_Jammed;

/* *
 MasterMode

 Enable Master mode. (maybe redundant with Assign Channel ?) */
typedef struct _ant_MasterModeCmd { 
    uint32_t channel_number;
} ant_MasterModeCmd;

/* *
 OpenChannelCmd

 Open a new channel with channel_number */
typedef struct _ant_OpenChannelCmd { 
    uint32_t channel_number;
} ant_OpenChannelCmd;

typedef PB_BYTES_ARRAY_T(255) ant_PduReceived_pdu_t;
typedef struct _ant_PduReceived { 
    uint32_t channel_number;
    bool has_rssi;
    int32_t rssi;
    bool has_timestamp;
    uint32_t timestamp;
    bool has_crc_validity;
    bool crc_validity;
    ant_PduReceived_pdu_t pdu;
} ant_PduReceived;

typedef PB_BYTES_ARRAY_T(255) ant_RawPduReceived_pdu_t;
typedef struct _ant_RawPduReceived { 
    uint32_t channel_number;
    bool has_rssi;
    int32_t rssi;
    bool has_timestamp;
    uint32_t timestamp;
    bool has_crc_validity;
    bool crc_validity;
    ant_RawPduReceived_pdu_t pdu;
    uint32_t crc;
} ant_RawPduReceived;

typedef PB_BYTES_ARRAY_T(255) ant_SendCmd_pdu_t;
/* *
 SendCmd

 Transmit ANT packets on a single channel. */
typedef struct _ant_SendCmd { 
    uint32_t frequency;
    ant_SendCmd_pdu_t pdu;
} ant_SendCmd;

typedef PB_BYTES_ARRAY_T(255) ant_SendRawCmd_pdu_t;
/* *
 SendCmd

 Transmit raw ANT packets on a single channel. */
typedef struct _ant_SendRawCmd { 
    uint32_t frequency;
    ant_SendRawCmd_pdu_t pdu;
} ant_SendRawCmd;

/* *
 SetChannelPeriodCmd

 Configure the  ANT channel_period to use for the channel period */
typedef struct _ant_SetChannelPeriodCmd { 
    uint32_t channel_number;
    uint32_t channel_period;
} ant_SetChannelPeriodCmd;

/* *
 SetDeviceNumberCmd

 Configure the ANT device number for a given channel */
typedef struct _ant_SetDeviceNumberCmd { 
    uint32_t channel_number;
    uint32_t device_number;
} ant_SetDeviceNumberCmd;

/* *
 SetDeviceTypeCmd

 Configure the  ANT device type, for a given frequency */
typedef struct _ant_SetDeviceTypeCmd { 
    uint32_t channel_number;
    uint32_t device_type;
} ant_SetDeviceTypeCmd;

/* *
 SetFrequencyCmd

 Set the frequency and the associated channel numbers */
typedef struct _ant_SetFrequencyCmd { 
    uint32_t channel_number;
    uint32_t frequency;
} ant_SetFrequencyCmd;

typedef PB_BYTES_ARRAY_T(8) ant_SetNetworkKeyCmd_network_key_t;
typedef struct _ant_SetNetworkKeyCmd { 
    uint32_t network_number;
    ant_SetNetworkKeyCmd_network_key_t network_key;
} ant_SetNetworkKeyCmd;

/* *
 SetTransmissionTypeCmd

 Configure the  ANT transmission_type, for a given frequency */
typedef struct _ant_SetTransmissionTypeCmd { 
    uint32_t channel_number;
    uint32_t transmission_type;
} ant_SetTransmissionTypeCmd;

/* *
 SlaveMode

 Enable Slave mode. (maybe redundant with Assign Channel ?) */
typedef struct _ant_SlaveModeCmd { 
    uint32_t channel_number;
} ant_SlaveModeCmd;

typedef PB_BYTES_ARRAY_T(8) ant_SniffCmd_network_key_t;
/* *
 SniffCmd

 Enter sniffer mode
 It requires the user to provide frequency,
 network_key; and optionaly device_number, device_type,
 transmission_type */
typedef struct _ant_SniffCmd { 
    uint32_t frequency;
    ant_SniffCmd_network_key_t network_key;
    bool has_device_number;
    uint32_t device_number;
    bool has_device_type;
    uint32_t device_type;
    bool has_transmission_type;
    uint32_t transmission_type;
} ant_SniffCmd;

/* *
 UnassignChannelCmd

 Breaks the link channel number to network_number */
typedef struct _ant_UnassignChannelCmd { 
    uint32_t channel_number;
} ant_UnassignChannelCmd;

typedef struct _ant_Message { 
    pb_size_t which_msg;
    union {
        /* Messages */
        ant_SetDeviceNumberCmd set_device_number;
        ant_SetDeviceTypeCmd set_device_type;
        ant_SetTransmissionTypeCmd set_transmission_type;
        ant_SetChannelPeriodCmd set_channel_period;
        ant_SetNetworkKeyCmd set_network_key;
        ant_AssignChannelCmd assign_channel;
        ant_UnassignChannelCmd unassign_channel;
        ant_OpenChannelCmd open_channel;
        ant_CloseChannelCmd close_channel;
        ant_SetFrequencyCmd set_frequency;
        ant_SniffCmd sniff;
        ant_JamCmd jam;
        ant_SendCmd send;
        ant_SendRawCmd send_raw;
        ant_MasterModeCmd master_mode;
        ant_SlaveModeCmd slave_mode;
        ant_StartCmd start;
        ant_StopCmd stop;
        /* Notifications */
        ant_Jammed jammed;
        ant_RawPduReceived raw_pdu;
        ant_PduReceived pdu;
    } msg;
} ant_Message;


/* Helper constants for enums */
#define _ant_ANTCommand_MIN ant_ANTCommand_SetDeviceNumber
#define _ant_ANTCommand_MAX ant_ANTCommand_Stop
#define _ant_ANTCommand_ARRAYSIZE ((ant_ANTCommand)(ant_ANTCommand_Stop+1))

#define _ant_AntChannelType_MIN ant_AntChannelType_BIDIRECTIONAL_RECEIVE_CHANNEL
#define _ant_AntChannelType_MAX ant_AntChannelType_TRANSMIT_ONLY_CHANNEL
#define _ant_AntChannelType_ARRAYSIZE ((ant_AntChannelType)(ant_AntChannelType_TRANSMIT_ONLY_CHANNEL+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ant_SetDeviceNumberCmd_init_default      {0, 0}
#define ant_SetDeviceTypeCmd_init_default        {0, 0}
#define ant_SetTransmissionTypeCmd_init_default  {0, 0}
#define ant_SetChannelPeriodCmd_init_default     {0, 0}
#define ant_SetNetworkKeyCmd_init_default        {0, {0, {0}}}
#define ant_AssignChannelCmd_init_default        {0, 0, _ant_AntChannelType_MIN, false, 0, false, 0, false, 0, false, 0}
#define ant_UnassignChannelCmd_init_default      {0}
#define ant_OpenChannelCmd_init_default          {0}
#define ant_CloseChannelCmd_init_default         {0}
#define ant_SetFrequencyCmd_init_default         {0, 0}
#define ant_SniffCmd_init_default                {0, {0, {0}}, false, 0, false, 0, false, 0}
#define ant_JamCmd_init_default                  {0}
#define ant_SendCmd_init_default                 {0, {0, {0}}}
#define ant_SendRawCmd_init_default              {0, {0, {0}}}
#define ant_MasterModeCmd_init_default           {0}
#define ant_SlaveModeCmd_init_default            {0}
#define ant_StartCmd_init_default                {0}
#define ant_StopCmd_init_default                 {0}
#define ant_Jammed_init_default                  {0}
#define ant_RawPduReceived_init_default          {0, false, 0, false, 0, false, 0, {0, {0}}, 0}
#define ant_PduReceived_init_default             {0, false, 0, false, 0, false, 0, {0, {0}}}
#define ant_Message_init_default                 {0, {ant_SetDeviceNumberCmd_init_default}}
#define ant_SetDeviceNumberCmd_init_zero         {0, 0}
#define ant_SetDeviceTypeCmd_init_zero           {0, 0}
#define ant_SetTransmissionTypeCmd_init_zero     {0, 0}
#define ant_SetChannelPeriodCmd_init_zero        {0, 0}
#define ant_SetNetworkKeyCmd_init_zero           {0, {0, {0}}}
#define ant_AssignChannelCmd_init_zero           {0, 0, _ant_AntChannelType_MIN, false, 0, false, 0, false, 0, false, 0}
#define ant_UnassignChannelCmd_init_zero         {0}
#define ant_OpenChannelCmd_init_zero             {0}
#define ant_CloseChannelCmd_init_zero            {0}
#define ant_SetFrequencyCmd_init_zero            {0, 0}
#define ant_SniffCmd_init_zero                   {0, {0, {0}}, false, 0, false, 0, false, 0}
#define ant_JamCmd_init_zero                     {0}
#define ant_SendCmd_init_zero                    {0, {0, {0}}}
#define ant_SendRawCmd_init_zero                 {0, {0, {0}}}
#define ant_MasterModeCmd_init_zero              {0}
#define ant_SlaveModeCmd_init_zero               {0}
#define ant_StartCmd_init_zero                   {0}
#define ant_StopCmd_init_zero                    {0}
#define ant_Jammed_init_zero                     {0}
#define ant_RawPduReceived_init_zero             {0, false, 0, false, 0, false, 0, {0, {0}}, 0}
#define ant_PduReceived_init_zero                {0, false, 0, false, 0, false, 0, {0, {0}}}
#define ant_Message_init_zero                    {0, {ant_SetDeviceNumberCmd_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define ant_AssignChannelCmd_channel_number_tag  1
#define ant_AssignChannelCmd_network_number_tag  2
#define ant_AssignChannelCmd_channel_type_tag    3
#define ant_AssignChannelCmd_background_scanning_tag 4
#define ant_AssignChannelCmd_frequency_agility_tag 5
#define ant_AssignChannelCmd_fast_channel_initiation_tag 6
#define ant_AssignChannelCmd_asynchronous_transmission_tag 7
#define ant_CloseChannelCmd_channel_number_tag   1
#define ant_JamCmd_frequency_tag                 1
#define ant_Jammed_timestamp_tag                 1
#define ant_MasterModeCmd_channel_number_tag     1
#define ant_OpenChannelCmd_channel_number_tag    1
#define ant_PduReceived_channel_number_tag       1
#define ant_PduReceived_rssi_tag                 2
#define ant_PduReceived_timestamp_tag            3
#define ant_PduReceived_crc_validity_tag         4
#define ant_PduReceived_pdu_tag                  5
#define ant_RawPduReceived_channel_number_tag    1
#define ant_RawPduReceived_rssi_tag              2
#define ant_RawPduReceived_timestamp_tag         3
#define ant_RawPduReceived_crc_validity_tag      4
#define ant_RawPduReceived_pdu_tag               5
#define ant_RawPduReceived_crc_tag               6
#define ant_SendCmd_frequency_tag                1
#define ant_SendCmd_pdu_tag                      2
#define ant_SendRawCmd_frequency_tag             1
#define ant_SendRawCmd_pdu_tag                   2
#define ant_SetChannelPeriodCmd_channel_number_tag 1
#define ant_SetChannelPeriodCmd_channel_period_tag 2
#define ant_SetDeviceNumberCmd_channel_number_tag 1
#define ant_SetDeviceNumberCmd_device_number_tag 2
#define ant_SetDeviceTypeCmd_channel_number_tag  1
#define ant_SetDeviceTypeCmd_device_type_tag     2
#define ant_SetFrequencyCmd_channel_number_tag   1
#define ant_SetFrequencyCmd_frequency_tag        2
#define ant_SetNetworkKeyCmd_network_number_tag  1
#define ant_SetNetworkKeyCmd_network_key_tag     2
#define ant_SetTransmissionTypeCmd_channel_number_tag 1
#define ant_SetTransmissionTypeCmd_transmission_type_tag 2
#define ant_SlaveModeCmd_channel_number_tag      1
#define ant_SniffCmd_frequency_tag               1
#define ant_SniffCmd_network_key_tag             2
#define ant_SniffCmd_device_number_tag           3
#define ant_SniffCmd_device_type_tag             4
#define ant_SniffCmd_transmission_type_tag       5
#define ant_UnassignChannelCmd_channel_number_tag 1
#define ant_Message_set_device_number_tag        1
#define ant_Message_set_device_type_tag          2
#define ant_Message_set_transmission_type_tag    3
#define ant_Message_set_channel_period_tag       4
#define ant_Message_set_network_key_tag          5
#define ant_Message_assign_channel_tag           6
#define ant_Message_unassign_channel_tag         7
#define ant_Message_open_channel_tag             8
#define ant_Message_close_channel_tag            9
#define ant_Message_set_frequency_tag            10
#define ant_Message_sniff_tag                    11
#define ant_Message_jam_tag                      12
#define ant_Message_send_tag                     13
#define ant_Message_send_raw_tag                 14
#define ant_Message_master_mode_tag              15
#define ant_Message_slave_mode_tag               16
#define ant_Message_start_tag                    17
#define ant_Message_stop_tag                     18
#define ant_Message_jammed_tag                   19
#define ant_Message_raw_pdu_tag                  20
#define ant_Message_pdu_tag                      21

/* Struct field encoding specification for nanopb */
#define ant_SetDeviceNumberCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   channel_number,    1) \
X(a, STATIC,   SINGULAR, UINT32,   device_number,     2)
#define ant_SetDeviceNumberCmd_CALLBACK NULL
#define ant_SetDeviceNumberCmd_DEFAULT NULL

#define ant_SetDeviceTypeCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   channel_number,    1) \
X(a, STATIC,   SINGULAR, UINT32,   device_type,       2)
#define ant_SetDeviceTypeCmd_CALLBACK NULL
#define ant_SetDeviceTypeCmd_DEFAULT NULL

#define ant_SetTransmissionTypeCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   channel_number,    1) \
X(a, STATIC,   SINGULAR, UINT32,   transmission_type,   2)
#define ant_SetTransmissionTypeCmd_CALLBACK NULL
#define ant_SetTransmissionTypeCmd_DEFAULT NULL

#define ant_SetChannelPeriodCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   channel_number,    1) \
X(a, STATIC,   SINGULAR, UINT32,   channel_period,    2)
#define ant_SetChannelPeriodCmd_CALLBACK NULL
#define ant_SetChannelPeriodCmd_DEFAULT NULL

#define ant_SetNetworkKeyCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   network_number,    1) \
X(a, STATIC,   SINGULAR, BYTES,    network_key,       2)
#define ant_SetNetworkKeyCmd_CALLBACK NULL
#define ant_SetNetworkKeyCmd_DEFAULT NULL

#define ant_AssignChannelCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   channel_number,    1) \
X(a, STATIC,   SINGULAR, UINT32,   network_number,    2) \
X(a, STATIC,   SINGULAR, UENUM,    channel_type,      3) \
X(a, STATIC,   OPTIONAL, BOOL,     background_scanning,   4) \
X(a, STATIC,   OPTIONAL, BOOL,     frequency_agility,   5) \
X(a, STATIC,   OPTIONAL, BOOL,     fast_channel_initiation,   6) \
X(a, STATIC,   OPTIONAL, BOOL,     asynchronous_transmission,   7)
#define ant_AssignChannelCmd_CALLBACK NULL
#define ant_AssignChannelCmd_DEFAULT NULL

#define ant_UnassignChannelCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   channel_number,    1)
#define ant_UnassignChannelCmd_CALLBACK NULL
#define ant_UnassignChannelCmd_DEFAULT NULL

#define ant_OpenChannelCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   channel_number,    1)
#define ant_OpenChannelCmd_CALLBACK NULL
#define ant_OpenChannelCmd_DEFAULT NULL

#define ant_CloseChannelCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   channel_number,    1)
#define ant_CloseChannelCmd_CALLBACK NULL
#define ant_CloseChannelCmd_DEFAULT NULL

#define ant_SetFrequencyCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   channel_number,    1) \
X(a, STATIC,   SINGULAR, UINT32,   frequency,         2)
#define ant_SetFrequencyCmd_CALLBACK NULL
#define ant_SetFrequencyCmd_DEFAULT NULL

#define ant_SniffCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   frequency,         1) \
X(a, STATIC,   SINGULAR, BYTES,    network_key,       2) \
X(a, STATIC,   OPTIONAL, UINT32,   device_number,     3) \
X(a, STATIC,   OPTIONAL, UINT32,   device_type,       4) \
X(a, STATIC,   OPTIONAL, UINT32,   transmission_type,   5)
#define ant_SniffCmd_CALLBACK NULL
#define ant_SniffCmd_DEFAULT NULL

#define ant_JamCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   frequency,         1)
#define ant_JamCmd_CALLBACK NULL
#define ant_JamCmd_DEFAULT NULL

#define ant_SendCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   frequency,         1) \
X(a, STATIC,   SINGULAR, BYTES,    pdu,               2)
#define ant_SendCmd_CALLBACK NULL
#define ant_SendCmd_DEFAULT NULL

#define ant_SendRawCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   frequency,         1) \
X(a, STATIC,   SINGULAR, BYTES,    pdu,               2)
#define ant_SendRawCmd_CALLBACK NULL
#define ant_SendRawCmd_DEFAULT NULL

#define ant_MasterModeCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   channel_number,    1)
#define ant_MasterModeCmd_CALLBACK NULL
#define ant_MasterModeCmd_DEFAULT NULL

#define ant_SlaveModeCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   channel_number,    1)
#define ant_SlaveModeCmd_CALLBACK NULL
#define ant_SlaveModeCmd_DEFAULT NULL

#define ant_StartCmd_FIELDLIST(X, a) \

#define ant_StartCmd_CALLBACK NULL
#define ant_StartCmd_DEFAULT NULL

#define ant_StopCmd_FIELDLIST(X, a) \

#define ant_StopCmd_CALLBACK NULL
#define ant_StopCmd_DEFAULT NULL

#define ant_Jammed_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   timestamp,         1)
#define ant_Jammed_CALLBACK NULL
#define ant_Jammed_DEFAULT NULL

#define ant_RawPduReceived_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   channel_number,    1) \
X(a, STATIC,   OPTIONAL, INT32,    rssi,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   timestamp,         3) \
X(a, STATIC,   OPTIONAL, BOOL,     crc_validity,      4) \
X(a, STATIC,   SINGULAR, BYTES,    pdu,               5) \
X(a, STATIC,   SINGULAR, UINT32,   crc,               6)
#define ant_RawPduReceived_CALLBACK NULL
#define ant_RawPduReceived_DEFAULT NULL

#define ant_PduReceived_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   channel_number,    1) \
X(a, STATIC,   OPTIONAL, INT32,    rssi,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   timestamp,         3) \
X(a, STATIC,   OPTIONAL, BOOL,     crc_validity,      4) \
X(a, STATIC,   SINGULAR, BYTES,    pdu,               5)
#define ant_PduReceived_CALLBACK NULL
#define ant_PduReceived_DEFAULT NULL

#define ant_Message_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,set_device_number,msg.set_device_number),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,set_device_type,msg.set_device_type),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,set_transmission_type,msg.set_transmission_type),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,set_channel_period,msg.set_channel_period),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,set_network_key,msg.set_network_key),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,assign_channel,msg.assign_channel),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,unassign_channel,msg.unassign_channel),   7) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,open_channel,msg.open_channel),   8) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,close_channel,msg.close_channel),   9) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,set_frequency,msg.set_frequency),  10) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,sniff,msg.sniff),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,jam,msg.jam),  12) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,send,msg.send),  13) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,send_raw,msg.send_raw),  14) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,master_mode,msg.master_mode),  15) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,slave_mode,msg.slave_mode),  16) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,start,msg.start),  17) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,stop,msg.stop),  18) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,jammed,msg.jammed),  19) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,raw_pdu,msg.raw_pdu),  20) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,pdu,msg.pdu),  21)
#define ant_Message_CALLBACK NULL
#define ant_Message_DEFAULT NULL
#define ant_Message_msg_set_device_number_MSGTYPE ant_SetDeviceNumberCmd
#define ant_Message_msg_set_device_type_MSGTYPE ant_SetDeviceTypeCmd
#define ant_Message_msg_set_transmission_type_MSGTYPE ant_SetTransmissionTypeCmd
#define ant_Message_msg_set_channel_period_MSGTYPE ant_SetChannelPeriodCmd
#define ant_Message_msg_set_network_key_MSGTYPE ant_SetNetworkKeyCmd
#define ant_Message_msg_assign_channel_MSGTYPE ant_AssignChannelCmd
#define ant_Message_msg_unassign_channel_MSGTYPE ant_UnassignChannelCmd
#define ant_Message_msg_open_channel_MSGTYPE ant_OpenChannelCmd
#define ant_Message_msg_close_channel_MSGTYPE ant_CloseChannelCmd
#define ant_Message_msg_set_frequency_MSGTYPE ant_SetFrequencyCmd
#define ant_Message_msg_sniff_MSGTYPE ant_SniffCmd
#define ant_Message_msg_jam_MSGTYPE ant_JamCmd
#define ant_Message_msg_send_MSGTYPE ant_SendCmd
#define ant_Message_msg_send_raw_MSGTYPE ant_SendRawCmd
#define ant_Message_msg_master_mode_MSGTYPE ant_MasterModeCmd
#define ant_Message_msg_slave_mode_MSGTYPE ant_SlaveModeCmd
#define ant_Message_msg_start_MSGTYPE ant_StartCmd
#define ant_Message_msg_stop_MSGTYPE ant_StopCmd
#define ant_Message_msg_jammed_MSGTYPE ant_Jammed
#define ant_Message_msg_raw_pdu_MSGTYPE ant_RawPduReceived
#define ant_Message_msg_pdu_MSGTYPE ant_PduReceived

extern const pb_msgdesc_t ant_SetDeviceNumberCmd_msg;
extern const pb_msgdesc_t ant_SetDeviceTypeCmd_msg;
extern const pb_msgdesc_t ant_SetTransmissionTypeCmd_msg;
extern const pb_msgdesc_t ant_SetChannelPeriodCmd_msg;
extern const pb_msgdesc_t ant_SetNetworkKeyCmd_msg;
extern const pb_msgdesc_t ant_AssignChannelCmd_msg;
extern const pb_msgdesc_t ant_UnassignChannelCmd_msg;
extern const pb_msgdesc_t ant_OpenChannelCmd_msg;
extern const pb_msgdesc_t ant_CloseChannelCmd_msg;
extern const pb_msgdesc_t ant_SetFrequencyCmd_msg;
extern const pb_msgdesc_t ant_SniffCmd_msg;
extern const pb_msgdesc_t ant_JamCmd_msg;
extern const pb_msgdesc_t ant_SendCmd_msg;
extern const pb_msgdesc_t ant_SendRawCmd_msg;
extern const pb_msgdesc_t ant_MasterModeCmd_msg;
extern const pb_msgdesc_t ant_SlaveModeCmd_msg;
extern const pb_msgdesc_t ant_StartCmd_msg;
extern const pb_msgdesc_t ant_StopCmd_msg;
extern const pb_msgdesc_t ant_Jammed_msg;
extern const pb_msgdesc_t ant_RawPduReceived_msg;
extern const pb_msgdesc_t ant_PduReceived_msg;
extern const pb_msgdesc_t ant_Message_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ant_SetDeviceNumberCmd_fields &ant_SetDeviceNumberCmd_msg
#define ant_SetDeviceTypeCmd_fields &ant_SetDeviceTypeCmd_msg
#define ant_SetTransmissionTypeCmd_fields &ant_SetTransmissionTypeCmd_msg
#define ant_SetChannelPeriodCmd_fields &ant_SetChannelPeriodCmd_msg
#define ant_SetNetworkKeyCmd_fields &ant_SetNetworkKeyCmd_msg
#define ant_AssignChannelCmd_fields &ant_AssignChannelCmd_msg
#define ant_UnassignChannelCmd_fields &ant_UnassignChannelCmd_msg
#define ant_OpenChannelCmd_fields &ant_OpenChannelCmd_msg
#define ant_CloseChannelCmd_fields &ant_CloseChannelCmd_msg
#define ant_SetFrequencyCmd_fields &ant_SetFrequencyCmd_msg
#define ant_SniffCmd_fields &ant_SniffCmd_msg
#define ant_JamCmd_fields &ant_JamCmd_msg
#define ant_SendCmd_fields &ant_SendCmd_msg
#define ant_SendRawCmd_fields &ant_SendRawCmd_msg
#define ant_MasterModeCmd_fields &ant_MasterModeCmd_msg
#define ant_SlaveModeCmd_fields &ant_SlaveModeCmd_msg
#define ant_StartCmd_fields &ant_StartCmd_msg
#define ant_StopCmd_fields &ant_StopCmd_msg
#define ant_Jammed_fields &ant_Jammed_msg
#define ant_RawPduReceived_fields &ant_RawPduReceived_msg
#define ant_PduReceived_fields &ant_PduReceived_msg
#define ant_Message_fields &ant_Message_msg

/* Maximum encoded size of messages (where known) */
#define ant_AssignChannelCmd_size                22
#define ant_CloseChannelCmd_size                 6
#define ant_JamCmd_size                          6
#define ant_Jammed_size                          6
#define ant_MasterModeCmd_size                   6
#define ant_Message_size                         293
#define ant_OpenChannelCmd_size                  6
#define ant_PduReceived_size                     283
#define ant_RawPduReceived_size                  289
#define ant_SendCmd_size                         264
#define ant_SendRawCmd_size                      264
#define ant_SetChannelPeriodCmd_size             12
#define ant_SetDeviceNumberCmd_size              12
#define ant_SetDeviceTypeCmd_size                12
#define ant_SetFrequencyCmd_size                 12
#define ant_SetNetworkKeyCmd_size                16
#define ant_SetTransmissionTypeCmd_size          12
#define ant_SlaveModeCmd_size                    6
#define ant_SniffCmd_size                        34
#define ant_StartCmd_size                        0
#define ant_StopCmd_size                         0
#define ant_UnassignChannelCmd_size              6

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
