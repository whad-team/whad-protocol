/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7-dev */

#ifndef PB_PHY_PROTOCOL_PHY_PHY_PB_H_INCLUDED
#define PB_PHY_PROTOCOL_PHY_PHY_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _phy_PhyCommand { /* *
 Configuration commands */
    /* Set modulation */
    phy_PhyCommand_SetASKModulation = 0, 
    phy_PhyCommand_SetFSKModulation = 1, 
    phy_PhyCommand_SetGFSKModulation = 2, 
    phy_PhyCommand_SetBPSKModulation = 3, 
    phy_PhyCommand_SetQPSKModulation = 4, 
    /* Set frequency */
    phy_PhyCommand_GetSupportedFrequencies = 5, 
    phy_PhyCommand_SetFrequency = 6, 
    /* Set datarate */
    phy_PhyCommand_SetDataRate = 7, 
    /* Set endianness */
    phy_PhyCommand_SetEndianness = 8, 
    /* Set TX power */
    phy_PhyCommand_SetTXPower = 9, 
    /* Set maximum packet size */
    phy_PhyCommand_SetPacketSize = 10, 
    /* Set Synchronization word */
    phy_PhyCommand_SetSyncWord = 11, 
    /* Sniff data */
    phy_PhyCommand_Sniff = 12, 
    /* Send data */
    phy_PhyCommand_Send = 13, 
    phy_PhyCommand_SendRaw = 14, 
    /* Jam data */
    phy_PhyCommand_Jam = 15, 
    /* Monitor channel */
    phy_PhyCommand_Monitor = 16, 
    /* Start */
    phy_PhyCommand_Start = 17, 
    /* Stop */
    phy_PhyCommand_Stop = 18 
} phy_PhyCommand;

typedef enum _phy_Endianness { 
    phy_Endianness_BIG = 0, 
    phy_Endianness_LITTLE = 1 
} phy_Endianness;

typedef enum _phy_TXPower { 
    phy_TXPower_LOW = 0, 
    phy_TXPower_MEDIUM = 1, 
    phy_TXPower_HIGH = 2 
} phy_TXPower;

typedef enum _phy_JammingMode { 
    phy_JammingMode_CONTINUOUS = 0, 
    phy_JammingMode_REACTIVE = 1 
} phy_JammingMode;

/* Struct definitions */
/* *
 GetSupportedFrequenciesCmd

 Get a list of supported frequency range. */
typedef struct _phy_GetSupportedFrequenciesCmd { 
    char dummy_field;
} phy_GetSupportedFrequenciesCmd;

/* *
 MonitorCmd

 Monitor the selected channel. */
typedef struct _phy_MonitorCmd { 
    char dummy_field;
} phy_MonitorCmd;

/* *
 SendCmd

 Send IQ stream matching the transceiver frequency and data rate configuration. */
typedef struct _phy_SendRawCmd { 
    pb_callback_t iq;
} phy_SendRawCmd;

/* *
 SetBPSKModulationCmd

 Configure the transceiver to use Binary Phase Shift Keying modulation scheme. */
typedef struct _phy_SetBPSKModulationCmd { 
    char dummy_field;
} phy_SetBPSKModulationCmd;

/* *
 StartCmd

 Enable current mode. */
typedef struct _phy_StartCmd { 
    char dummy_field;
} phy_StartCmd;

/* *
 StopCmd

 Disable current mode. */
typedef struct _phy_StopCmd { 
    char dummy_field;
} phy_StopCmd;

/* *
 SupportedFrequencyRanges

 Notifies a list of supported frequency range. */
typedef struct _phy_SupportedFrequencyRanges { 
    pb_callback_t frequency_ranges;
} phy_SupportedFrequencyRanges;

/* *
 JamCmd

 Jam the selected channel.
 Mode can be provided, indicating if jamming is continuous or reactive. */
typedef struct _phy_JamCmd { 
    phy_JammingMode mode;
} phy_JamCmd;

/* *
 Jammed

 Notifies jamming of a packet. */
typedef struct _phy_Jammed { 
    uint32_t timestamp;
} phy_Jammed;

/* *
 MonitoringReport

 Notifies output of monitoring procedure. */
typedef struct _phy_MonitoringReport { 
    uint32_t timestamp;
    pb_callback_t report;
} phy_MonitoringReport;

typedef PB_BYTES_ARRAY_T(255) phy_PacketReceived_packet_t;
typedef struct _phy_PacketReceived { 
    uint32_t frequency;
    bool has_rssi;
    int32_t rssi;
    bool has_timestamp;
    uint32_t timestamp;
    phy_PacketReceived_packet_t packet;
} phy_PacketReceived;

typedef PB_BYTES_ARRAY_T(255) phy_RawPacketReceived_packet_t;
typedef struct _phy_RawPacketReceived { 
    uint32_t frequency;
    bool has_rssi;
    int32_t rssi;
    bool has_timestamp;
    uint32_t timestamp;
    phy_RawPacketReceived_packet_t packet;
    pb_callback_t iq;
} phy_RawPacketReceived;

typedef PB_BYTES_ARRAY_T(255) phy_SendCmd_packet_t;
typedef struct _phy_SendCmd { 
    phy_SendCmd_packet_t packet;
} phy_SendCmd;

/* *
 SetASKModulationCmd

 Configure the transceiver to use Amplitude Shift Keying modulation scheme.
 On-off-keying modulation (OOK) can be configured by setting the ook field to true. */
typedef struct _phy_SetASKModulationCmd { 
    bool ook;
} phy_SetASKModulationCmd;

/* *
 SetDataRateCmd

 Configure the data rate to use (in bauds). */
typedef struct _phy_SetDataRateCmd { 
    uint32_t rate;
} phy_SetDataRateCmd;

/* *
 SetEndiannessCmd

 Configure the endianness to use (little or big endian). */
typedef struct _phy_SetEndiannessCmd { 
    phy_Endianness endianness;
} phy_SetEndiannessCmd;

/* *
 SetFSKModulationCmd

 Configure the transceiver to use Frequency Shift Keying modulation scheme.
 The deviation of the modulation can be provided. */
typedef struct _phy_SetFSKModulationCmd { 
    uint32_t deviation;
} phy_SetFSKModulationCmd;

/* *
 SetFrequencyCmd

 Configure the frequency to use by the transceiver (in Hz). */
typedef struct _phy_SetFrequencyCmd { 
    uint32_t frequency;
} phy_SetFrequencyCmd;

/* *
 SetGFSKModulationCmd

 Configure the transceiver to use Gaussian Frequency Shift Keying modulation scheme.
 The deviation of the modulation can be provided. */
typedef struct _phy_SetGFSKModulationCmd { 
    uint32_t deviation;
} phy_SetGFSKModulationCmd;

/* *
 SetPacketSizeCmd

 Configure the size of data received and transmitted (in number of bytes).
 May be limited depending on underlying hardware. */
typedef struct _phy_SetPacketSizeCmd { 
    uint32_t packet_size;
} phy_SetPacketSizeCmd;

/* *
 SetQPSKModulationCmd

 Configure the transceiver to use Quadrature Phase Shift Keying modulation scheme. */
typedef struct _phy_SetQPSKModulationCmd { 
    bool offset_qpsk;
} phy_SetQPSKModulationCmd;

typedef PB_BYTES_ARRAY_T(10) phy_SetSyncWordCmd_sync_word_t;
/* *
 SetSyncWordCmd

 Configure synchronization word matching over-the-air patterns. */
typedef struct _phy_SetSyncWordCmd { 
    phy_SetSyncWordCmd_sync_word_t sync_word;
} phy_SetSyncWordCmd;

/* *
 SetTXPowerCmd

 Configure the TX power to use (MIN, MEDIUM, MAX).
 Note: I keep it simple now, but it may be relevant to use a fine grained unit. */
typedef struct _phy_SetTXPowerCmd { 
    phy_TXPower tx_power;
} phy_SetTXPowerCmd;

typedef struct _phy_SniffCmd { 
    bool has_iq_stream;
    bool iq_stream;
} phy_SniffCmd;

typedef struct _phy_SupportedFrequencyRanges_FrequencyRange { 
    /* Messages */
    uint32_t start;
    uint32_t end;
} phy_SupportedFrequencyRanges_FrequencyRange;

typedef struct _phy_Message { 
    pb_size_t which_msg;
    union {
        phy_SetASKModulationCmd mod_ask;
        phy_SetFSKModulationCmd mod_fsk;
        phy_SetGFSKModulationCmd mod_gfsk;
        phy_SetBPSKModulationCmd mod_bpsk;
        phy_SetQPSKModulationCmd mod_qpsk;
        phy_GetSupportedFrequenciesCmd get_supported_freq;
        phy_SetFrequencyCmd set_freq;
        phy_SetDataRateCmd datarate;
        phy_SetEndiannessCmd endianness;
        phy_SetTXPowerCmd tx_power;
        phy_SetPacketSizeCmd packet_size;
        phy_SetSyncWordCmd sync_word;
        phy_SniffCmd sniff;
        phy_SendCmd send;
        phy_SendRawCmd send_raw;
        phy_StartCmd start;
        phy_StopCmd stop;
        phy_JamCmd jam;
        phy_MonitorCmd monitor;
        phy_PacketReceived packet;
        phy_RawPacketReceived raw_packet;
        phy_Jammed jammed;
        phy_MonitoringReport monitor_report;
        phy_SupportedFrequencyRanges supported_freq;
    } msg;
} phy_Message;


/* Helper constants for enums */
#define _phy_PhyCommand_MIN phy_PhyCommand_SetASKModulation
#define _phy_PhyCommand_MAX phy_PhyCommand_Stop
#define _phy_PhyCommand_ARRAYSIZE ((phy_PhyCommand)(phy_PhyCommand_Stop+1))

#define _phy_Endianness_MIN phy_Endianness_BIG
#define _phy_Endianness_MAX phy_Endianness_LITTLE
#define _phy_Endianness_ARRAYSIZE ((phy_Endianness)(phy_Endianness_LITTLE+1))

#define _phy_TXPower_MIN phy_TXPower_LOW
#define _phy_TXPower_MAX phy_TXPower_HIGH
#define _phy_TXPower_ARRAYSIZE ((phy_TXPower)(phy_TXPower_HIGH+1))

#define _phy_JammingMode_MIN phy_JammingMode_CONTINUOUS
#define _phy_JammingMode_MAX phy_JammingMode_REACTIVE
#define _phy_JammingMode_ARRAYSIZE ((phy_JammingMode)(phy_JammingMode_REACTIVE+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define phy_SetASKModulationCmd_init_default     {0}
#define phy_SetFSKModulationCmd_init_default     {0}
#define phy_SetGFSKModulationCmd_init_default    {0}
#define phy_SetBPSKModulationCmd_init_default    {0}
#define phy_SetQPSKModulationCmd_init_default    {0}
#define phy_GetSupportedFrequenciesCmd_init_default {0}
#define phy_SetFrequencyCmd_init_default         {0}
#define phy_SetDataRateCmd_init_default          {0}
#define phy_SetEndiannessCmd_init_default        {_phy_Endianness_MIN}
#define phy_SetTXPowerCmd_init_default           {_phy_TXPower_MIN}
#define phy_SetPacketSizeCmd_init_default        {0}
#define phy_SetSyncWordCmd_init_default          {{0, {0}}}
#define phy_SniffCmd_init_default                {false, 0}
#define phy_SendCmd_init_default                 {{0, {0}}}
#define phy_SendRawCmd_init_default              {{{NULL}, NULL}}
#define phy_StartCmd_init_default                {0}
#define phy_StopCmd_init_default                 {0}
#define phy_JamCmd_init_default                  {_phy_JammingMode_MIN}
#define phy_MonitorCmd_init_default              {0}
#define phy_PacketReceived_init_default          {0, false, 0, false, 0, {0, {0}}}
#define phy_RawPacketReceived_init_default       {0, false, 0, false, 0, {0, {0}}, {{NULL}, NULL}}
#define phy_Jammed_init_default                  {0}
#define phy_MonitoringReport_init_default        {0, {{NULL}, NULL}}
#define phy_SupportedFrequencyRanges_init_default {{{NULL}, NULL}}
#define phy_SupportedFrequencyRanges_FrequencyRange_init_default {0, 0}
#define phy_Message_init_default                 {0, {phy_SetASKModulationCmd_init_default}}
#define phy_SetASKModulationCmd_init_zero        {0}
#define phy_SetFSKModulationCmd_init_zero        {0}
#define phy_SetGFSKModulationCmd_init_zero       {0}
#define phy_SetBPSKModulationCmd_init_zero       {0}
#define phy_SetQPSKModulationCmd_init_zero       {0}
#define phy_GetSupportedFrequenciesCmd_init_zero {0}
#define phy_SetFrequencyCmd_init_zero            {0}
#define phy_SetDataRateCmd_init_zero             {0}
#define phy_SetEndiannessCmd_init_zero           {_phy_Endianness_MIN}
#define phy_SetTXPowerCmd_init_zero              {_phy_TXPower_MIN}
#define phy_SetPacketSizeCmd_init_zero           {0}
#define phy_SetSyncWordCmd_init_zero             {{0, {0}}}
#define phy_SniffCmd_init_zero                   {false, 0}
#define phy_SendCmd_init_zero                    {{0, {0}}}
#define phy_SendRawCmd_init_zero                 {{{NULL}, NULL}}
#define phy_StartCmd_init_zero                   {0}
#define phy_StopCmd_init_zero                    {0}
#define phy_JamCmd_init_zero                     {_phy_JammingMode_MIN}
#define phy_MonitorCmd_init_zero                 {0}
#define phy_PacketReceived_init_zero             {0, false, 0, false, 0, {0, {0}}}
#define phy_RawPacketReceived_init_zero          {0, false, 0, false, 0, {0, {0}}, {{NULL}, NULL}}
#define phy_Jammed_init_zero                     {0}
#define phy_MonitoringReport_init_zero           {0, {{NULL}, NULL}}
#define phy_SupportedFrequencyRanges_init_zero   {{{NULL}, NULL}}
#define phy_SupportedFrequencyRanges_FrequencyRange_init_zero {0, 0}
#define phy_Message_init_zero                    {0, {phy_SetASKModulationCmd_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define phy_SendRawCmd_iq_tag                    1
#define phy_SupportedFrequencyRanges_frequency_ranges_tag 1
#define phy_JamCmd_mode_tag                      1
#define phy_Jammed_timestamp_tag                 1
#define phy_MonitoringReport_timestamp_tag       1
#define phy_MonitoringReport_report_tag          2
#define phy_PacketReceived_frequency_tag         1
#define phy_PacketReceived_rssi_tag              2
#define phy_PacketReceived_timestamp_tag         3
#define phy_PacketReceived_packet_tag            4
#define phy_RawPacketReceived_frequency_tag      1
#define phy_RawPacketReceived_rssi_tag           2
#define phy_RawPacketReceived_timestamp_tag      3
#define phy_RawPacketReceived_packet_tag         4
#define phy_RawPacketReceived_iq_tag             5
#define phy_SendCmd_packet_tag                   1
#define phy_SetASKModulationCmd_ook_tag          1
#define phy_SetDataRateCmd_rate_tag              1
#define phy_SetEndiannessCmd_endianness_tag      1
#define phy_SetFSKModulationCmd_deviation_tag    1
#define phy_SetFrequencyCmd_frequency_tag        1
#define phy_SetGFSKModulationCmd_deviation_tag   1
#define phy_SetPacketSizeCmd_packet_size_tag     1
#define phy_SetQPSKModulationCmd_offset_qpsk_tag 1
#define phy_SetSyncWordCmd_sync_word_tag         1
#define phy_SetTXPowerCmd_tx_power_tag           1
#define phy_SniffCmd_iq_stream_tag               1
#define phy_SupportedFrequencyRanges_FrequencyRange_start_tag 1
#define phy_SupportedFrequencyRanges_FrequencyRange_end_tag 2
#define phy_Message_mod_ask_tag                  1
#define phy_Message_mod_fsk_tag                  2
#define phy_Message_mod_gfsk_tag                 3
#define phy_Message_mod_bpsk_tag                 4
#define phy_Message_mod_qpsk_tag                 5
#define phy_Message_get_supported_freq_tag       6
#define phy_Message_set_freq_tag                 7
#define phy_Message_datarate_tag                 8
#define phy_Message_endianness_tag               9
#define phy_Message_tx_power_tag                 10
#define phy_Message_packet_size_tag              11
#define phy_Message_sync_word_tag                12
#define phy_Message_sniff_tag                    13
#define phy_Message_send_tag                     14
#define phy_Message_send_raw_tag                 15
#define phy_Message_start_tag                    16
#define phy_Message_stop_tag                     17
#define phy_Message_jam_tag                      18
#define phy_Message_monitor_tag                  19
#define phy_Message_packet_tag                   20
#define phy_Message_raw_packet_tag               21
#define phy_Message_jammed_tag                   22
#define phy_Message_monitor_report_tag           23
#define phy_Message_supported_freq_tag           24

/* Struct field encoding specification for nanopb */
#define phy_SetASKModulationCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     ook,               1)
#define phy_SetASKModulationCmd_CALLBACK NULL
#define phy_SetASKModulationCmd_DEFAULT NULL

#define phy_SetFSKModulationCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   deviation,         1)
#define phy_SetFSKModulationCmd_CALLBACK NULL
#define phy_SetFSKModulationCmd_DEFAULT NULL

#define phy_SetGFSKModulationCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   deviation,         1)
#define phy_SetGFSKModulationCmd_CALLBACK NULL
#define phy_SetGFSKModulationCmd_DEFAULT NULL

#define phy_SetBPSKModulationCmd_FIELDLIST(X, a) \

#define phy_SetBPSKModulationCmd_CALLBACK NULL
#define phy_SetBPSKModulationCmd_DEFAULT NULL

#define phy_SetQPSKModulationCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     offset_qpsk,       1)
#define phy_SetQPSKModulationCmd_CALLBACK NULL
#define phy_SetQPSKModulationCmd_DEFAULT NULL

#define phy_GetSupportedFrequenciesCmd_FIELDLIST(X, a) \

#define phy_GetSupportedFrequenciesCmd_CALLBACK NULL
#define phy_GetSupportedFrequenciesCmd_DEFAULT NULL

#define phy_SetFrequencyCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   frequency,         1)
#define phy_SetFrequencyCmd_CALLBACK NULL
#define phy_SetFrequencyCmd_DEFAULT NULL

#define phy_SetDataRateCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   rate,              1)
#define phy_SetDataRateCmd_CALLBACK NULL
#define phy_SetDataRateCmd_DEFAULT NULL

#define phy_SetEndiannessCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    endianness,        1)
#define phy_SetEndiannessCmd_CALLBACK NULL
#define phy_SetEndiannessCmd_DEFAULT NULL

#define phy_SetTXPowerCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    tx_power,          1)
#define phy_SetTXPowerCmd_CALLBACK NULL
#define phy_SetTXPowerCmd_DEFAULT NULL

#define phy_SetPacketSizeCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   packet_size,       1)
#define phy_SetPacketSizeCmd_CALLBACK NULL
#define phy_SetPacketSizeCmd_DEFAULT NULL

#define phy_SetSyncWordCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BYTES,    sync_word,         1)
#define phy_SetSyncWordCmd_CALLBACK NULL
#define phy_SetSyncWordCmd_DEFAULT NULL

#define phy_SniffCmd_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     iq_stream,         1)
#define phy_SniffCmd_CALLBACK NULL
#define phy_SniffCmd_DEFAULT NULL

#define phy_SendCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BYTES,    packet,            1)
#define phy_SendCmd_CALLBACK NULL
#define phy_SendCmd_DEFAULT NULL

#define phy_SendRawCmd_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, INT32,    iq,                1)
#define phy_SendRawCmd_CALLBACK pb_default_field_callback
#define phy_SendRawCmd_DEFAULT NULL

#define phy_StartCmd_FIELDLIST(X, a) \

#define phy_StartCmd_CALLBACK NULL
#define phy_StartCmd_DEFAULT NULL

#define phy_StopCmd_FIELDLIST(X, a) \

#define phy_StopCmd_CALLBACK NULL
#define phy_StopCmd_DEFAULT NULL

#define phy_JamCmd_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    mode,              1)
#define phy_JamCmd_CALLBACK NULL
#define phy_JamCmd_DEFAULT NULL

#define phy_MonitorCmd_FIELDLIST(X, a) \

#define phy_MonitorCmd_CALLBACK NULL
#define phy_MonitorCmd_DEFAULT NULL

#define phy_PacketReceived_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   frequency,         1) \
X(a, STATIC,   OPTIONAL, INT32,    rssi,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   timestamp,         3) \
X(a, STATIC,   SINGULAR, BYTES,    packet,            4)
#define phy_PacketReceived_CALLBACK NULL
#define phy_PacketReceived_DEFAULT NULL

#define phy_RawPacketReceived_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   frequency,         1) \
X(a, STATIC,   OPTIONAL, INT32,    rssi,              2) \
X(a, STATIC,   OPTIONAL, UINT32,   timestamp,         3) \
X(a, STATIC,   SINGULAR, BYTES,    packet,            4) \
X(a, CALLBACK, REPEATED, INT32,    iq,                5)
#define phy_RawPacketReceived_CALLBACK pb_default_field_callback
#define phy_RawPacketReceived_DEFAULT NULL

#define phy_Jammed_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   timestamp,         1)
#define phy_Jammed_CALLBACK NULL
#define phy_Jammed_DEFAULT NULL

#define phy_MonitoringReport_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   timestamp,         1) \
X(a, CALLBACK, REPEATED, UINT32,   report,            2)
#define phy_MonitoringReport_CALLBACK pb_default_field_callback
#define phy_MonitoringReport_DEFAULT NULL

#define phy_SupportedFrequencyRanges_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  frequency_ranges,   1)
#define phy_SupportedFrequencyRanges_CALLBACK pb_default_field_callback
#define phy_SupportedFrequencyRanges_DEFAULT NULL
#define phy_SupportedFrequencyRanges_frequency_ranges_MSGTYPE phy_SupportedFrequencyRanges_FrequencyRange

#define phy_SupportedFrequencyRanges_FrequencyRange_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   start,             1) \
X(a, STATIC,   SINGULAR, UINT32,   end,               2)
#define phy_SupportedFrequencyRanges_FrequencyRange_CALLBACK NULL
#define phy_SupportedFrequencyRanges_FrequencyRange_DEFAULT NULL

#define phy_Message_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,mod_ask,msg.mod_ask),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,mod_fsk,msg.mod_fsk),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,mod_gfsk,msg.mod_gfsk),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,mod_bpsk,msg.mod_bpsk),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,mod_qpsk,msg.mod_qpsk),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,get_supported_freq,msg.get_supported_freq),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,set_freq,msg.set_freq),   7) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,datarate,msg.datarate),   8) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,endianness,msg.endianness),   9) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,tx_power,msg.tx_power),  10) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,packet_size,msg.packet_size),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,sync_word,msg.sync_word),  12) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,sniff,msg.sniff),  13) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,send,msg.send),  14) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,send_raw,msg.send_raw),  15) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,start,msg.start),  16) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,stop,msg.stop),  17) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,jam,msg.jam),  18) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,monitor,msg.monitor),  19) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,packet,msg.packet),  20) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,raw_packet,msg.raw_packet),  21) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,jammed,msg.jammed),  22) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,monitor_report,msg.monitor_report),  23) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,supported_freq,msg.supported_freq),  24)
#define phy_Message_CALLBACK NULL
#define phy_Message_DEFAULT NULL
#define phy_Message_msg_mod_ask_MSGTYPE phy_SetASKModulationCmd
#define phy_Message_msg_mod_fsk_MSGTYPE phy_SetFSKModulationCmd
#define phy_Message_msg_mod_gfsk_MSGTYPE phy_SetGFSKModulationCmd
#define phy_Message_msg_mod_bpsk_MSGTYPE phy_SetBPSKModulationCmd
#define phy_Message_msg_mod_qpsk_MSGTYPE phy_SetQPSKModulationCmd
#define phy_Message_msg_get_supported_freq_MSGTYPE phy_GetSupportedFrequenciesCmd
#define phy_Message_msg_set_freq_MSGTYPE phy_SetFrequencyCmd
#define phy_Message_msg_datarate_MSGTYPE phy_SetDataRateCmd
#define phy_Message_msg_endianness_MSGTYPE phy_SetEndiannessCmd
#define phy_Message_msg_tx_power_MSGTYPE phy_SetTXPowerCmd
#define phy_Message_msg_packet_size_MSGTYPE phy_SetPacketSizeCmd
#define phy_Message_msg_sync_word_MSGTYPE phy_SetSyncWordCmd
#define phy_Message_msg_sniff_MSGTYPE phy_SniffCmd
#define phy_Message_msg_send_MSGTYPE phy_SendCmd
#define phy_Message_msg_send_raw_MSGTYPE phy_SendRawCmd
#define phy_Message_msg_start_MSGTYPE phy_StartCmd
#define phy_Message_msg_stop_MSGTYPE phy_StopCmd
#define phy_Message_msg_jam_MSGTYPE phy_JamCmd
#define phy_Message_msg_monitor_MSGTYPE phy_MonitorCmd
#define phy_Message_msg_packet_MSGTYPE phy_PacketReceived
#define phy_Message_msg_raw_packet_MSGTYPE phy_RawPacketReceived
#define phy_Message_msg_jammed_MSGTYPE phy_Jammed
#define phy_Message_msg_monitor_report_MSGTYPE phy_MonitoringReport
#define phy_Message_msg_supported_freq_MSGTYPE phy_SupportedFrequencyRanges

extern const pb_msgdesc_t phy_SetASKModulationCmd_msg;
extern const pb_msgdesc_t phy_SetFSKModulationCmd_msg;
extern const pb_msgdesc_t phy_SetGFSKModulationCmd_msg;
extern const pb_msgdesc_t phy_SetBPSKModulationCmd_msg;
extern const pb_msgdesc_t phy_SetQPSKModulationCmd_msg;
extern const pb_msgdesc_t phy_GetSupportedFrequenciesCmd_msg;
extern const pb_msgdesc_t phy_SetFrequencyCmd_msg;
extern const pb_msgdesc_t phy_SetDataRateCmd_msg;
extern const pb_msgdesc_t phy_SetEndiannessCmd_msg;
extern const pb_msgdesc_t phy_SetTXPowerCmd_msg;
extern const pb_msgdesc_t phy_SetPacketSizeCmd_msg;
extern const pb_msgdesc_t phy_SetSyncWordCmd_msg;
extern const pb_msgdesc_t phy_SniffCmd_msg;
extern const pb_msgdesc_t phy_SendCmd_msg;
extern const pb_msgdesc_t phy_SendRawCmd_msg;
extern const pb_msgdesc_t phy_StartCmd_msg;
extern const pb_msgdesc_t phy_StopCmd_msg;
extern const pb_msgdesc_t phy_JamCmd_msg;
extern const pb_msgdesc_t phy_MonitorCmd_msg;
extern const pb_msgdesc_t phy_PacketReceived_msg;
extern const pb_msgdesc_t phy_RawPacketReceived_msg;
extern const pb_msgdesc_t phy_Jammed_msg;
extern const pb_msgdesc_t phy_MonitoringReport_msg;
extern const pb_msgdesc_t phy_SupportedFrequencyRanges_msg;
extern const pb_msgdesc_t phy_SupportedFrequencyRanges_FrequencyRange_msg;
extern const pb_msgdesc_t phy_Message_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define phy_SetASKModulationCmd_fields &phy_SetASKModulationCmd_msg
#define phy_SetFSKModulationCmd_fields &phy_SetFSKModulationCmd_msg
#define phy_SetGFSKModulationCmd_fields &phy_SetGFSKModulationCmd_msg
#define phy_SetBPSKModulationCmd_fields &phy_SetBPSKModulationCmd_msg
#define phy_SetQPSKModulationCmd_fields &phy_SetQPSKModulationCmd_msg
#define phy_GetSupportedFrequenciesCmd_fields &phy_GetSupportedFrequenciesCmd_msg
#define phy_SetFrequencyCmd_fields &phy_SetFrequencyCmd_msg
#define phy_SetDataRateCmd_fields &phy_SetDataRateCmd_msg
#define phy_SetEndiannessCmd_fields &phy_SetEndiannessCmd_msg
#define phy_SetTXPowerCmd_fields &phy_SetTXPowerCmd_msg
#define phy_SetPacketSizeCmd_fields &phy_SetPacketSizeCmd_msg
#define phy_SetSyncWordCmd_fields &phy_SetSyncWordCmd_msg
#define phy_SniffCmd_fields &phy_SniffCmd_msg
#define phy_SendCmd_fields &phy_SendCmd_msg
#define phy_SendRawCmd_fields &phy_SendRawCmd_msg
#define phy_StartCmd_fields &phy_StartCmd_msg
#define phy_StopCmd_fields &phy_StopCmd_msg
#define phy_JamCmd_fields &phy_JamCmd_msg
#define phy_MonitorCmd_fields &phy_MonitorCmd_msg
#define phy_PacketReceived_fields &phy_PacketReceived_msg
#define phy_RawPacketReceived_fields &phy_RawPacketReceived_msg
#define phy_Jammed_fields &phy_Jammed_msg
#define phy_MonitoringReport_fields &phy_MonitoringReport_msg
#define phy_SupportedFrequencyRanges_fields &phy_SupportedFrequencyRanges_msg
#define phy_SupportedFrequencyRanges_FrequencyRange_fields &phy_SupportedFrequencyRanges_FrequencyRange_msg
#define phy_Message_fields &phy_Message_msg

/* Maximum encoded size of messages (where known) */
/* phy_SendRawCmd_size depends on runtime parameters */
/* phy_RawPacketReceived_size depends on runtime parameters */
/* phy_MonitoringReport_size depends on runtime parameters */
/* phy_SupportedFrequencyRanges_size depends on runtime parameters */
/* phy_Message_size depends on runtime parameters */
#define phy_GetSupportedFrequenciesCmd_size      0
#define phy_JamCmd_size                          2
#define phy_Jammed_size                          6
#define phy_MonitorCmd_size                      0
#define phy_PacketReceived_size                  281
#define phy_SendCmd_size                         258
#define phy_SetASKModulationCmd_size             2
#define phy_SetBPSKModulationCmd_size            0
#define phy_SetDataRateCmd_size                  6
#define phy_SetEndiannessCmd_size                2
#define phy_SetFSKModulationCmd_size             6
#define phy_SetFrequencyCmd_size                 6
#define phy_SetGFSKModulationCmd_size            6
#define phy_SetPacketSizeCmd_size                6
#define phy_SetQPSKModulationCmd_size            2
#define phy_SetSyncWordCmd_size                  12
#define phy_SetTXPowerCmd_size                   2
#define phy_SniffCmd_size                        2
#define phy_StartCmd_size                        0
#define phy_StopCmd_size                         0
#define phy_SupportedFrequencyRanges_FrequencyRange_size 12

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
